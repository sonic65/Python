{
  "uid" : "8606b7541a67ee68",
  "name" : "flask",
  "fullName" : "scripts.test_case.Test_case#test_case",
  "historyId" : "2267bb04dfeab26bec94c39d05e91380",
  "time" : {
    "start" : 1586840470558,
    "stop" : 1586840470559,
    "duration" : 1
  },
  "description" : "<font color=\"red\">请求URL：</font>127.0.0.1:8888/login?name=yuhang&pwd=123<br /><font color=\"red\">期望值：</font>asc-0003",
  "descriptionHtml" : "<p><font color=\"red\">请求URL：</font>127.0.0.1:8888/login?name=yuhang&amp;pwd=123<br /><font color=\"red\">期望值：</font>asc-0003</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert {'response': ...hang&pwd=123'} == '{\"code\": -1,...e\": \"账号密码错误\"}'\n  +{'response': '请求发送失败，详细信息： url=127.0.0.1:8888/login?name=yuhang&pwd=123'}\n  -'{\"code\": -1, \"message\": \"账号密码错误\"}'",
  "statusTrace" : "self = <scripts.test_case.Test_case object at 0x106f65d10>\ncase = {'case_expect': '{\"code\": -1, \"message\": \"账号密码错误\"}', 'case_id': 'asc-0003', 'case_method': 'POST', 'case_module': 'flask', ...}\n\n    @pytest.mark.parametrize('case', ExcelHandler().get_excel_data)\n    def test_case(self, case):\n        \"\"\"  执行断言 \"\"\"\n        # print(case)\n        # 发请求\n        response = RequestHandler(case).get_response\n    \n        # 制作 allure 报告\n        allure.dynamic.title(case['case_module'])\n        allure.dynamic.description('<font color=\"red\">请求URL：</font>{}<br />'\n                                   '<font color=\"red\">期望值：</font>{}'.format(case['case_url'], case['case_id']))\n        allure.dynamic.feature(case['case_module'])\n        allure.dynamic.story(case['case_method'])\n>       assert response[0] == response[1]\nE       assert {'response': ...hang&pwd=123'} == '{\"code\": -1,...e\": \"账号密码错误\"}'\nE         +{'response': '请求发送失败，详细信息： url=127.0.0.1:8888/login?name=yuhang&pwd=123'}\nE         -'{\"code\": -1, \"message\": \"账号密码错误\"}'\n\nscripts/test_case.py:34: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1586840470451,
      "stop" : 1586840470451,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "<font color=\"red\">请求URL：</font>127.0.0.1:8888/login?name=yuhang&pwd=123<br /><font color=\"red\">期望值：</font>asc-0003",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert {'response': ...hang&pwd=123'} == '{\"code\": -1,...e\": \"账号密码错误\"}'\n  +{'response': '请求发送失败，详细信息： url=127.0.0.1:8888/login?name=yuhang&pwd=123'}\n  -'{\"code\": -1, \"message\": \"账号密码错误\"}'",
    "statusTrace" : "self = <scripts.test_case.Test_case object at 0x106f65d10>\ncase = {'case_expect': '{\"code\": -1, \"message\": \"账号密码错误\"}', 'case_id': 'asc-0003', 'case_method': 'POST', 'case_module': 'flask', ...}\n\n    @pytest.mark.parametrize('case', ExcelHandler().get_excel_data)\n    def test_case(self, case):\n        \"\"\"  执行断言 \"\"\"\n        # print(case)\n        # 发请求\n        response = RequestHandler(case).get_response\n    \n        # 制作 allure 报告\n        allure.dynamic.title(case['case_module'])\n        allure.dynamic.description('<font color=\"red\">请求URL：</font>{}<br />'\n                                   '<font color=\"red\">期望值：</font>{}'.format(case['case_url'], case['case_id']))\n        allure.dynamic.feature(case['case_module'])\n        allure.dynamic.story(case['case_method'])\n>       assert response[0] == response[1]\nE       assert {'response': ...hang&pwd=123'} == '{\"code\": -1,...e\": \"账号密码错误\"}'\nE         +{'response': '请求发送失败，详细信息： url=127.0.0.1:8888/login?name=yuhang&pwd=123'}\nE         -'{\"code\": -1, \"message\": \"账号密码错误\"}'\n\nscripts/test_case.py:34: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e5805a72b0434a8b",
      "name" : "log",
      "source" : "e5805a72b0434a8b.txt",
      "type" : "text/plain",
      "size" : 153
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1586840470604,
      "stop" : 1586840485227,
      "duration" : 14623
    },
    "status" : "broken",
    "statusMessage" : "NameError: name 'mail_pass' is not defined\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.7/site-packages/allure_commons/_allure.py\", line 185, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/usr/local/lib/python3.7/site-packages/_pytest/fixtures.py\", line 800, in _teardown_yield_fixture\n    next(it)\n  File \"/usr/local/lib/python3.7/site-packages/_pytest/python.py\", line 707, in xunit_setup_class_fixture\n    _call_with_optional_argument(func, self.obj)\n  File \"/usr/local/lib/python3.7/site-packages/_pytest/python.py\", line 634, in _call_with_optional_argument\n    func(arg)\n  File \"/Users/sonic/Project/Python/Pytest/scripts/test_case.py\", line 41, in teardown_class\n    EmailHandler().send_email()\n  File \"/Users/sonic/Project/Python/Pytest/uti/EmailHandler.py\", line 59, in send_email\n    smtp_obj.login(mail_user, mail_pass)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "flask"
  }, {
    "name" : "story",
    "value" : "POST"
  }, {
    "name" : "parentSuite",
    "value" : "scripts"
  }, {
    "name" : "suite",
    "value" : "test_case"
  }, {
    "name" : "subSuite",
    "value" : "Test_case"
  }, {
    "name" : "host",
    "value" : "localhost"
  }, {
    "name" : "thread",
    "value" : "76874-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "scripts.test_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "{'case_id': 'asc-0003', 'case_module': 'flask', 'case_url': '127.0.0.1:8888/login?name=yuhang&pwd=123', 'isRun': 'RUN', 'case_method': 'POST', 'case_params': '', 'case_expect': '{\"code\": -1, \"message\": \"账号密码错误\"}', 'case_result_code': '', 'case_result_message': ''}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "8606b7541a67ee68.json",
  "parameterValues" : [ "{'case_id': 'asc-0003', 'case_module': 'flask', 'case_url': '127.0.0.1:8888/login?name=yuhang&pwd=123', 'isRun': 'RUN', 'case_method': 'POST', 'case_params': '', 'case_expect': '{\"code\": -1, \"message\": \"账号密码错误\"}', 'case_result_code': '', 'case_result_message': ''}" ]
}