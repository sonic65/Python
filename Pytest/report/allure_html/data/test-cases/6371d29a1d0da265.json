{
  "uid" : "6371d29a1d0da265",
  "name" : "flask",
  "fullName" : "scripts.test_case.Test_case#test_case",
  "historyId" : "8969fb93535c3ccbd57d0d36069d62f2",
  "time" : {
    "start" : 1586843440917,
    "stop" : 1586843442520,
    "duration" : 1603
  },
  "description" : "<font color=\"red\">请求URL：</font>https://cnodejs.org/api/v1/user/alsotang<br /><font color=\"red\">期望值：</font>asc-0005",
  "descriptionHtml" : "<p><font color=\"red\">请求URL：</font>https://cnodejs.org/api/v1/user/alsotang<br /><font color=\"red\">期望值：</font>asc-0005</p>\n",
  "status" : "broken",
  "statusMessage" : "NameError: name 'mail_pass' is not defined",
  "statusTrace" : "self = <class 'scripts.test_case.Test_case'>\n\n    def teardown_class(self):\n        \"\"\"  执行alllure命令 \"\"\"\n    \n        AllureHandler().execute_command()\n        # 发邮件\n>       EmailHandler().send_email()\n\nscripts/test_case.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <uti.EmailHandler.EmailHandler object at 0x10dbd9dd0>\n\n    def send_email(self):\n        \"\"\" 发送邮件 \"\"\"\n    \n        # 第三方 SMTP 服务\n        mail_host = \"smtp.qq.com\"  # 设置服务器\n        mail_user = \"1641839697@qq.com\"  # 用户名\n        # mail_pass = \"ygarpyvxlllgcbcc\"  # 口令\n    \n        # 设置收件人和发件人\n        sender = '1641839697@qq.com'\n        receivers = ['sonic64@qq.com', ]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n    \n        # 创建一个带附件的实例对象\n        message = MIMEMultipart()\n    \n        # 邮件主题、收件人、发件人\n        subject = '请查阅--测试报告'  # 邮件主题\n        message['Subject'] = Header(subject, 'utf-8')\n        message['From'] = Header(\"{}\".format(sender), 'utf-8')  # 发件人\n        message['To'] = Header(\"{}\".format(';'.join(receivers)), 'utf-8')  # 收件人\n    \n        # 邮件正文内容 html 形式邮件\n        send_content = self.read_report()  # 获取测试报告\n        html = MIMEText(_text=send_content, _subtype='html', _charset='utf-8')  # 第一个参数为邮件内容\n    \n        # 构造附件\n        att = MIMEText(_text=send_content, _subtype='base64', _charset='utf-8')\n        att[\"Content-Type\"] = 'application/octet-stream'\n        file_name = 'report.html'\n        att[\"Content-Disposition\"] = 'attachment; filename=\"{}\"'.format(file_name)  # # filename 为邮件附件中显示什么名字\n        message.attach(html)\n        message.attach(att)\n    \n        try:\n            smtp_obj = smtplib.SMTP()\n            smtp_obj.connect(mail_host, 25)  # 25 为 SMTP 端口号\n>           smtp_obj.login(mail_user, mail_pass)\nE           NameError: name 'mail_pass' is not defined\n\nuti/EmailHandler.py:59: NameError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1586843440915,
      "stop" : 1586843440915,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "<font color=\"red\">请求URL：</font>https://cnodejs.org/api/v1/user/alsotang<br /><font color=\"red\">期望值：</font>asc-0005",
    "status" : "broken",
    "statusMessage" : "NameError: name 'mail_pass' is not defined",
    "statusTrace" : "self = <class 'scripts.test_case.Test_case'>\n\n    def teardown_class(self):\n        \"\"\"  执行alllure命令 \"\"\"\n    \n        AllureHandler().execute_command()\n        # 发邮件\n>       EmailHandler().send_email()\n\nscripts/test_case.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <uti.EmailHandler.EmailHandler object at 0x10dbd9dd0>\n\n    def send_email(self):\n        \"\"\" 发送邮件 \"\"\"\n    \n        # 第三方 SMTP 服务\n        mail_host = \"smtp.qq.com\"  # 设置服务器\n        mail_user = \"1641839697@qq.com\"  # 用户名\n        # mail_pass = \"ygarpyvxlllgcbcc\"  # 口令\n    \n        # 设置收件人和发件人\n        sender = '1641839697@qq.com'\n        receivers = ['sonic64@qq.com', ]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n    \n        # 创建一个带附件的实例对象\n        message = MIMEMultipart()\n    \n        # 邮件主题、收件人、发件人\n        subject = '请查阅--测试报告'  # 邮件主题\n        message['Subject'] = Header(subject, 'utf-8')\n        message['From'] = Header(\"{}\".format(sender), 'utf-8')  # 发件人\n        message['To'] = Header(\"{}\".format(';'.join(receivers)), 'utf-8')  # 收件人\n    \n        # 邮件正文内容 html 形式邮件\n        send_content = self.read_report()  # 获取测试报告\n        html = MIMEText(_text=send_content, _subtype='html', _charset='utf-8')  # 第一个参数为邮件内容\n    \n        # 构造附件\n        att = MIMEText(_text=send_content, _subtype='base64', _charset='utf-8')\n        att[\"Content-Type\"] = 'application/octet-stream'\n        file_name = 'report.html'\n        att[\"Content-Disposition\"] = 'attachment; filename=\"{}\"'.format(file_name)  # # filename 为邮件附件中显示什么名字\n        message.attach(html)\n        message.attach(att)\n    \n        try:\n            smtp_obj = smtplib.SMTP()\n            smtp_obj.connect(mail_host, 25)  # 25 为 SMTP 端口号\n>           smtp_obj.login(mail_user, mail_pass)\nE           NameError: name 'mail_pass' is not defined\n\nuti/EmailHandler.py:59: NameError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "44b47f1067d95a54",
      "name" : "log",
      "source" : "44b47f1067d95a54.txt",
      "type" : "text/plain",
      "size" : 105
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1586843442522,
      "stop" : 1586843454361,
      "duration" : 11839
    },
    "status" : "broken",
    "statusMessage" : "NameError: name 'mail_pass' is not defined\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.7/site-packages/allure_commons/_allure.py\", line 185, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/usr/local/lib/python3.7/site-packages/_pytest/fixtures.py\", line 800, in _teardown_yield_fixture\n    next(it)\n  File \"/usr/local/lib/python3.7/site-packages/_pytest/python.py\", line 707, in xunit_setup_class_fixture\n    _call_with_optional_argument(func, self.obj)\n  File \"/usr/local/lib/python3.7/site-packages/_pytest/python.py\", line 634, in _call_with_optional_argument\n    func(arg)\n  File \"/Users/sonic/Project/Python/Pytest/scripts/test_case.py\", line 41, in teardown_class\n    EmailHandler().send_email()\n  File \"/Users/sonic/Project/Python/Pytest/uti/EmailHandler.py\", line 59, in send_email\n    smtp_obj.login(mail_user, mail_pass)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "flask"
  }, {
    "name" : "story",
    "value" : "get"
  }, {
    "name" : "parentSuite",
    "value" : "scripts"
  }, {
    "name" : "suite",
    "value" : "test_case"
  }, {
    "name" : "subSuite",
    "value" : "Test_case"
  }, {
    "name" : "host",
    "value" : "localhost"
  }, {
    "name" : "thread",
    "value" : "79790-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "scripts.test_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "{'case_id': 'asc-0005', 'case_module': 'flask', 'case_url': 'https://cnodejs.org/api/v1/user/alsotang', 'isRun': 'RUN', 'case_method': 'get', 'case_params': '', 'case_expect': '{\"success\":true}', 'case_result_code': '', 'case_result_message': ''}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "6371d29a1d0da265.json",
  "parameterValues" : [ "{'case_id': 'asc-0005', 'case_module': 'flask', 'case_url': 'https://cnodejs.org/api/v1/user/alsotang', 'isRun': 'RUN', 'case_method': 'get', 'case_params': '', 'case_expect': '{\"success\":true}', 'case_result_code': '', 'case_result_message': ''}" ]
}